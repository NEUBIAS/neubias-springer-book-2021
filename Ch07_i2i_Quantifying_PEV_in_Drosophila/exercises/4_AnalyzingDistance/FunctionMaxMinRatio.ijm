// This code is to be used for the exercice regarding the analysis of the previous computed distances
// It asks to select the directory 4.AnalysingDistance which contains the PEV000001L_Dist.csv generated by the exercice 3.
// It is slightly different version from the function found in the full macro in order to focus on the important part


fss = File.separator;
Dir = getDirectory("Choose the Directory 4.AnalysingDistance")
open(Dir+fss+"PEV000001L_Dist.csv");
TableName = "PEV000001L_Dist.csv";
Table.rename(TableName,"Results");
PatchNumber = 33;

MaxMinRatio(PatchNumber,TableName);


function MaxMinRatio(PatchNumber,TableName) {
	counter3 = 0;
	DistObjecti = newArray(PatchNumber-1);
	Min_DistObjecti_S = newArray(PatchNumber);
	Max_DistObjecti_S = newArray(PatchNumber);
	DistancesNumber = PatchNumber*(PatchNumber-1)/2;
	for (j = 0; j < PatchNumber; j++) {
		for (i = 0; i < DistancesNumber; i++) {
			// Find the distance between the patch j and the other patches
			if (getResult("Patch1 N°", i) == j || getResult("Patch2 N°", i) == j){       
				DistObjecti[counter3] = getResult("Distances", i);
				counter3 = counter3 +1;
			}
		}
		DistObjecti_S = Array.sort(DistObjecti);
		// Build the Array of minimal distance between the j patch and the other patches
		Min_DistObjecti_S[j] = DistObjecti_S[0];  
		// Build the Array of maximal distance between the j patch and the other patches                                      
		Max_DistObjecti_S[j] = DistObjecti_S[PatchNumber-2];                            
		counter3 = 0;
	}
	Array.getStatistics(Min_DistObjecti_S, min, max, mean, stdDev);
	MinMean = mean;
	Array.getStatistics(Max_DistObjecti_S, min, max, mean, stdDev);
	MaxMean = mean;
	Ratio = MaxMean/MinMean;
	Table.rename("Results",TableName);
	print("The ratio of the maximal and minimal distances is "+Ratio);
}
